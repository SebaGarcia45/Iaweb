name: Daily API Request

on:
  schedule:
    - cron: "0 12 * * 1-5"
  workflow_dispatch: {}

jobs:
  request:
    runs-on: ubuntu-latest
    concurrency:
      group: daily-request
      cancel-in-progress: true

    steps:
      - name: Build JSON (Chile TZ)
        run: |
          TZ="America/Santiago"
          YEAR=$(date +"%Y")
          CURRENT_MONTH=$(date +"%-m")
          DAYS_IN_CURRENT_MONTH=$(date -d "$(date +%Y-%m-01) +1 month -1 day" +%d)
          PAYLOAD_MONTH=$((CURRENT_MONTH - 1))
          DAY_OF_WEEK=$(date +%u)

          if [ "$DAY_OF_WEEK" -eq 1 ]; then
            HORA_SALIDA_NORMAL="17:30"
          else
            HORA_SALIDA_NORMAL="18:00"
          fi

          echo "[" > payload_base.json
          echo "  [" >> payload_base.json

          for ((i=0; i<$DAYS_IN_CURRENT_MONTH; i++)); do
            d=$((i + 1))
            day_of_week=$(date -d "$YEAR-$CURRENT_MONTH-$d" +%u)

            if [ "$day_of_week" -ge 6 ]; then
              EDITABLE=false
              HORA_ENTRADA=""
              HORA_SALIDA=""
            else
              EDITABLE=true
              HORA_ENTRADA="08:00"
              HORA_SALIDA="$HORA_SALIDA_NORMAL"
            fi

            cat >> payload_base.json <<EOF
              {
                "idUsuario": "DNI_PLACEHOLDER",
                "day": $i,
                "month": $PAYLOAD_MONTH,
                "year": $YEAR,
                "horaEntrada": "$HORA_ENTRADA",
                "horaSalida": "$HORA_SALIDA",
                "dayClass": "imputacionNormal",
                "editable": $EDITABLE
              }$( [ $d -lt $DAYS_IN_CURRENT_MONTH ] && echo "," )
          EOF
          done

          echo "  ]," >> payload_base.json
          echo "  []" >> payload_base.json
          echo "]" >> payload_base.json

          cat payload_base.json

      - name: Call API for each user
        run: |
          USERS_JSON='${{ secrets.USERS_JSON }}'

          echo "$USERS_JSON" | jq -c '.[]' | while read user; do
            DNI=$(echo $user | jq -r '.dni')
            MATRICULA=$(echo $user | jq -r '.matricula')
            USER_HASH=$(echo -n "$DNI" | sha256sum | cut -c1-8)
      
            jq --arg dni "$DNI" '.[][] |= (.idUsuario = $dni)' payload_base.json > payload.json
      
            RESPONSE=$(curl -s -o response.json -w "%{http_code}" \
              -X POST "${{ secrets.API_URL }}" \
              -H "Accept: application/json, text/plain, */*" \
              -H "Content-Type: application/json" \
              -H "Matricula: $MATRICULA" \
              -H "dni: $DNI" \
              -b "cookiesession1=${{ secrets.COOKIE }}" \
              --data-binary @payload.json)
      
            if [ "$RESPONSE" -lt 200 ] || [ "$RESPONSE" -ge 300 ]; then
              echo "Error para usuario hash=$USER_HASH (HTTP $RESPONSE)"
              if [ -s response.json ]; then
                jq '.status?, .message?' response.json || echo "Respuesta no es JSON válida"
              else
                echo "Respuesta vacía del servidor"
              fi
              exit 1
            fi
      
            echo "Request exitoso para usuario hash=$USER_HASH"
            jq '.status?, .message?' response.json || echo "Respuesta no es JSON válida"
          done
